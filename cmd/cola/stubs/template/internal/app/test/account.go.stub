// Code generated by MockGen. DO NOT EDIT.
// Source: ../services/iface/account.go

// Package mock_iface is a generated GoMock package.
package mock_iface

import (
	reflect "reflect"
	models "{{.}}/internal/app/database/models"
	iface "{{.}}/internal/app/services/iface"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAccountDao is a mock of AccountDao interface.
type MockAccountDao struct {
	ctrl     *gomock.Controller
	recorder *MockAccountDaoMockRecorder
}

// MockAccountDaoMockRecorder is the mock recorder for MockAccountDao.
type MockAccountDaoMockRecorder struct {
	mock *MockAccountDao
}

// NewMockAccountDao creates a new mock instance.
func NewMockAccountDao(ctrl *gomock.Controller) *MockAccountDao {
	mock := &MockAccountDao{ctrl: ctrl}
	mock.recorder = &MockAccountDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountDao) EXPECT() *MockAccountDaoMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *MockAccountDao) FindByUsername(username string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockAccountDaoMockRecorder) FindByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockAccountDao)(nil).FindByUsername), username)
}

// WithTx mocks base method.
func (m *MockAccountDao) WithTx(tx *gorm.DB) iface.AccountDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(iface.AccountDao)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAccountDaoMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAccountDao)(nil).WithTx), tx)
}
