package main

import (
	"{{moduleName}}"
	"{{moduleName}}/internal/controllers"
	"{{moduleName}}/internal/log"
	"{{moduleName}}/internal/database"
	"bytes"
	"github.com/spf13/viper"
	"github.com/zedisdog/cola/cmd/cola/migrate"
	"github.com/zedisdog/cola/task"
	"github.com/zedisdog/cola/transport/http"
	"os"
	"os/signal"
)

func main() {
	viper.SetConfigType("yml")
	err := viper.ReadConfig(bytes.NewBuffer({{moduleName}}.Config))
	if err != nil {
		panic(err)
	}
	viper.Set("migrations", database.Migrations)
	m, err := migrate.GetInstance()
    if err != nil {
        panic(err)
    }
    err = m.Up()
    if err != nil {
        panic(err)
    }
	logger := log.GetInstance()
	queue := task.NewQueue(50, logger)
	queue.Start()

	server := http.New(controllers.NewRoutes(), viper.New(), logger)
	server.Start()

	c := make(chan os.Signal)
	signal.Notify(c, os.Interrupt, os.Kill)
	for {
		select {
			case <-c:
				server.Stop()
				queue.Stop()
				return
		}
	}
}
